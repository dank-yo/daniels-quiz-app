{"ast":null,"code":"var _jsxFileName = \"/home/daniel/daniels-quiz-app/src/pages/exam.js\";\n/* exam.js\n * This page is responsible for the actual exam portion.\n * Should grab a quiz from the database then give the user to solve questions\n * \n * Daniel\n */\n\nimport React from 'react';\nimport axios from 'axios';\nimport { API_BASE_URL } from '../config';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass Exam extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      posts: [],\n      selectedOptions: {},\n      error: null\n    };\n    this.componentDidMount = () => {\n      const search = window.location.search;\n      const params = new URLSearchParams(search);\n      const quizID = params.get('id');\n      this.getQuiz(quizID);\n    };\n    this.getQuiz = async quizID => {\n      axios.get(`${API_BASE_URL}/exam?id=${quizID}`).then(response => {\n        const data = response.data;\n        const dataArray = data ? [data] : [];\n        this.setState({\n          posts: dataArray\n        });\n      }).catch(error => {\n        console.log(\"Error!\", error);\n      });\n    };\n    this.submitQuiz = () => {\n      const {\n        posts,\n        selectedOptions\n      } = this.state;\n      const quizData = posts[0];\n      const checkAnswers = quizData.questions.map((question, index) => {\n        return question.answer === selectedOptions[index];\n      });\n      const countCorrectAnswers = answers => {\n        const trueCount = answers.filter(answer => answer === true).length;\n        return trueCount;\n      };\n      const countIncorrectAnswers = answers => {\n        const falseCount = answers.filter(answer => answer === false).length;\n        return falseCount;\n      };\n      const totalCorrectAnswers = countCorrectAnswers(checkAnswers);\n      const totalIncorrectAnswers = countIncorrectAnswers(checkAnswers);\n      const totalQuestions = checkAnswers.length;\n      const calcPercentage = totalCorrectAnswers / totalQuestions;\n      const payload = {\n        quizid: quizData._id,\n        username: localStorage.getItem('username'),\n        email: localStorage.getItem('email'),\n        userID: localStorage.getItem('_id'),\n        answers: selectedOptions,\n        correct: totalCorrectAnswers,\n        incorrect: totalIncorrectAnswers,\n        percentage: calcPercentage,\n        date: Date('<YYYY-mm-ddTHH:MM:ss>')\n      };\n      axios({\n        url: `${API_BASE_URL}/exam/submit`,\n        method: 'POST',\n        data: payload\n      }).then(res => {\n        // Handle the successful upload\n        console.log('Submission uploaded successfully!', res);\n        const redirectUrl = res.data.redirectUrl;\n        window.location.href = redirectUrl;\n      }).catch(error => {\n        // Handle the error\n        console.log('Error uploading submission:', error);\n      });\n    };\n    this.displayQuiz = quizzes => {\n      if (!quizzes) {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Error! Unable to display quizzes.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 19\n        }, this); // Return early if quizzes is not an array\n      }\n\n      const handleOptionChange = (questionIndex, optionIndex) => {\n        this.setState(prevState => ({\n          selectedOptions: {\n            ...prevState.selectedOptions,\n            [questionIndex]: optionIndex\n          }\n        }), () => {\n          //console.log(this.state.selectedOptions);\n        });\n      };\n      return quizzes.map((quiz, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        id: index,\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          id: \"title\",\n          children: quiz.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          id: \"creator\",\n          children: [\"By \", quiz.creator]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"container w-100 m-0 p-0\",\n          style: {\n            textAlign: 'left'\n          },\n          children: quiz.questions.map((question, questionIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n            id: 'q' + (questionIndex + 1),\n            className: \"w-50 mx-auto bg-dark-transparent m-2 p-2 rounded\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"#\", questionIndex + 1, \": \", question.question]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 19\n            }, this), question.options.map((option, optionIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"radio\",\n              children: /*#__PURE__*/_jsxDEV(\"label\", {\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"radio\",\n                  name: `q${questionIndex + 1}`,\n                  id: `q${questionIndex + 1}`,\n                  value: `option${optionIndex + 1}`,\n                  checked: this.state.selectedOptions[questionIndex] === optionIndex,\n                  onChange: () => handleOptionChange(questionIndex, optionIndex)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 124,\n                  columnNumber: 23\n                }, this), \" \", option]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 123,\n                columnNumber: 23\n              }, this)\n            }, optionIndex, false, {\n              fileName: _jsxFileName,\n              lineNumber: 122,\n              columnNumber: 21\n            }, this)), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 135,\n              columnNumber: 19\n            }, this)]\n          }, questionIndex, true, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn btn-outline-light\",\n          onClick: this.submitQuiz,\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 15\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 11\n      }, this));\n    };\n    this.handleEventUpdate = event => {\n      const target = event.target;\n      const name = target.name;\n      const value = target.value;\n      this.setState({\n        [name]: value\n      });\n    };\n  }\n  // Renders quiz\n  render() {\n    const {\n      posts,\n      error\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [error && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Error: \", error.message]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 23\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-center text-white container\",\n        children: this.displayQuiz(posts)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 11\n    }, this);\n  }\n}\nexport default Exam;","map":{"version":3,"names":["React","axios","API_BASE_URL","Exam","Component","state","posts","selectedOptions","error","componentDidMount","search","window","location","params","URLSearchParams","quizID","get","getQuiz","then","response","data","dataArray","setState","catch","console","log","submitQuiz","quizData","checkAnswers","questions","map","question","index","answer","countCorrectAnswers","answers","trueCount","filter","length","countIncorrectAnswers","falseCount","totalCorrectAnswers","totalIncorrectAnswers","totalQuestions","calcPercentage","payload","quizid","_id","username","localStorage","getItem","email","userID","correct","incorrect","percentage","date","Date","url","method","res","redirectUrl","href","displayQuiz","quizzes","handleOptionChange","questionIndex","optionIndex","prevState","quiz","title","creator","textAlign","options","option","handleEventUpdate","event","target","name","value","render","message"],"sources":["/home/daniel/daniels-quiz-app/src/pages/exam.js"],"sourcesContent":["/* exam.js\n * This page is responsible for the actual exam portion.\n * Should grab a quiz from the database then give the user to solve questions\n * \n * Daniel\n */\n\nimport React from 'react';\nimport axios from 'axios';\n\nimport { API_BASE_URL } from '../config';\n\nclass Exam extends React.Component{\n    state = {\n        posts:[],\n        selectedOptions: {},\n        error: null\n    }\n\n    // Calls whenever the React Component mounts.\n    componentDidMount = () => {\n      const search = window.location.search;\n      const params = new URLSearchParams(search);\n      const quizID = params.get('id');\n      this.getQuiz(quizID);\n    }\n\n    // Get a quiz\n    getQuiz = async (quizID) => {\n      axios.get(`${API_BASE_URL}/exam?id=${quizID}`)\n        .then((response) => {\n          const data = response.data;\n          const dataArray = data ? [data] : [];\n          this.setState({ posts: dataArray })\n        })\n        .catch((error) => {\n          console.log(\"Error!\", error);\n        });\n    }\n\n    // Prepare and handle quiz results to be uploaded\n    submitQuiz = () => {\n      const { posts, selectedOptions } = this.state;\n    \n      const quizData = posts[0];\n\n      const checkAnswers = quizData.questions.map((question, index) => {\n        return question.answer === selectedOptions[index];  \n      });\n\n      const countCorrectAnswers = (answers) => {\n        const trueCount = answers.filter((answer) => answer === true).length;\n        return trueCount;\n      }\n\n      const countIncorrectAnswers = (answers) => {\n        const falseCount = answers.filter((answer) => answer === false).length;\n        return falseCount;\n      }\n\n      const totalCorrectAnswers = countCorrectAnswers(checkAnswers);\n      const totalIncorrectAnswers = countIncorrectAnswers(checkAnswers);\n      const totalQuestions = checkAnswers.length;\n\n      const calcPercentage = (totalCorrectAnswers/totalQuestions);\n\n      const payload = {\n        quizid: quizData._id,\n        username: localStorage.getItem('username'),\n        email: localStorage.getItem('email'),\n        userID : localStorage.getItem('_id'),\n        answers : selectedOptions,\n        correct: totalCorrectAnswers,\n        incorrect: totalIncorrectAnswers,\n        percentage: calcPercentage,\n        date : Date('<YYYY-mm-ddTHH:MM:ss>')\n      }\n\n      axios({\n        url: `${API_BASE_URL}/exam/submit`,\n        method: 'POST',\n        data: payload\n      })\n      .then(res => {\n        // Handle the successful upload\n        console.log('Submission uploaded successfully!', res);\n        const redirectUrl = res.data.redirectUrl;\n        window.location.href = redirectUrl;\n      })\n      .catch(error => {\n        // Handle the error\n        console.log('Error uploading submission:', error);\n      });\n    }\n\n    // Returns a map of posts.\n    displayQuiz = (quizzes) => {\n        if (!quizzes) {\n          return (<div>Error! Unable to display quizzes.</div>); // Return early if quizzes is not an array\n        }\n\n        const handleOptionChange = (questionIndex, optionIndex) => {\n          this.setState(prevState => ({\n            selectedOptions: {\n              ...prevState.selectedOptions,\n              [questionIndex]: optionIndex\n            }\n          }), () => {\n            //console.log(this.state.selectedOptions);\n          });\n        };\n        \n        return quizzes.map((quiz, index) => (\n          <div id={index} key={index}>\n              <h1 id='title'>{quiz.title}</h1>\n              <p id='creator'>By {quiz.creator}</p>\n              <div className='container w-100 m-0 p-0' style={{textAlign: 'left'}}>\n              {quiz.questions.map((question, questionIndex) => (\n                <div key={questionIndex} id={'q'+(questionIndex+1)} className='w-50 mx-auto bg-dark-transparent m-2 p-2 rounded'>\n                  <p>#{questionIndex + 1}: {question.question}</p>\n                  {question.options.map((option, optionIndex) => (\n                    <div className=\"radio\" key={optionIndex}>\n                      <label> \n                      <input\n                        type=\"radio\"\n                        name={`q${questionIndex + 1}`}\n                        id={`q${questionIndex + 1}`}\n                        value={`option${optionIndex + 1}`}\n                        checked={this.state.selectedOptions[questionIndex] === optionIndex}\n                        onChange={() => handleOptionChange(questionIndex, optionIndex)}\n                      /> {option}\n                      </label>\n                    </div>\n                  ))}\n                  <br></br>\n                </div>\n              ))}\n              </div>\n              <button type=\"button\" className=\"btn btn-outline-light\" onClick={this.submitQuiz}>Submit</button>\n          </div>\n        ));\n      }\n    \n    // Updates the state of the target.\n    handleEventUpdate = (event) => {\n        const target = event.target;\n        const name = target.name; \n        const value = target.value;\n    \n        this.setState({\n          [name]: value\n        })\n      };\n\n\n    // Renders quiz\n    render() {\n      const { posts, error } = this.state;\n        return (\n          <div>\n            {error && <p>Error: {error.message}</p>}\n            <div className='text-center text-white container'>\n              {this.displayQuiz(posts)}\n            </div>\n          </div>\n        );\n      }\n}\n\nexport default Exam;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}